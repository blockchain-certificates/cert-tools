import subprocess
import os
import configargparse
from cert_tools import helpers

import create_v2_issuer
import create_revocation_list
import create_v3_certificate_template
import instantiate_v3_certificate_batch




def get_config():
    cwd = os.getcwd()
    p = configargparse.getArgumentParser(
        default_config_files=[os.path.join(cwd, 'conf_v2.ini')])
    p.add('-c', '--my-config', required=True, is_config_file=True,
          help='config file path')
    p.add_argument('--data_dir', type=str, help='where data files are located')
    p.add_argument('-k', '--issuer_public_key', type=str, required=True
                   ,
                   help='The key(s) an issuer uses to sign Assertions. See https://openbadgespec.org/#Profile for more details')
    p.add_argument('-k', '--public_key_created', type=str,
                   help='ISO8601-formatted date the issuer public key should be considered active')
    p.add_argument('-r', '--revocation_list_uri', type=str, required=True,
                   help='URI of the Revocation List used for marking revocation. See https://openbadgespec.org/#Profile for more details')
    p.add_argument('-o', '--output_file_revocation', type=str, help='the output file to save the issuer\'s identification file')

    p.add_argument('-d', '--issuer_id', type=str, required=True,
                   help='the issuer\'s publicly accessible identification file; i.e. URL of the file generated by this tool')
    p.add_argument('-u', '--issuer_url', type=str,
                   help='the issuer\'s main URL address')
    p.add_argument('-n', '--issuer_name', type=str, help='the issuer\'s name')
    p.add_argument('-e', '--issuer_email', type=str, help='the issuer\'s email')
    p.add_argument('-m', '--issuer_logo_file', type=str,
                   help='the issuer\' logo image')
    p.add_argument('-i', '--intro_url', required=False, type=str,
                   help='the issuer\'s introduction URL address')
    p.add_argument('-o', '--output_file', type=str,
                   help='the output file to save the issuer\'s identification file')
    p.add_argument('--template_dir', type=str,
                   help='the template output directory')
    p.add_argument('--template_file_name', type=str,
                   help='the template file name')
    p.add_argument('--additional_global_fields',
                   action=helpers.make_action('global_fields'),
                   help='additional global fields')
    p.add_argument('--additional_per_recipient_fields',
                   action=helpers.make_action('per_recipient_fields'),
                   help='additional per-recipient fields')
    p.add_argument('--unsigned_certificates_dir', type=str,
                   help='output directory for unsigned certificates')
    p.add_argument('--roster', type=str, help='roster file name')
    p.add_argument('--filename_format', type=str,
                   help='how to format certificate filenames (one of certname_identity or uuid)')
    p.add_argument('--no_clobber', action='store_true',
                   help='whether to overwrite existing certificates')

    args, _ = p.parse_known_args()
    args.abs_data_dir = os.path.abspath(os.path.join(cwd, args.data_dir))

    return args


def main():
    conf = get_config()
    create_v2_issuer.generate_issuer_file(conf)
    create_revocation_list.generate_revocation_list_file(conf)
    create_v3_certificate_template.write_certificate_template(conf)
    instantiate_v3_certificate_batch.instantiate_batch(conf)




if __name__ == "__main__":
    main()
